#!/usr/bin/env python3
"""A fast note-taking app for the UNIX terminal"""

import sys
import os
import subprocess
import stat

#pylint: disable=W0122

### Application configuration data

PIP_DEPENDENCIES = ['urwid', 'chardet']

### Application other data

PROGRAM_NAME = os.path.basename(sys.argv[0])

APP_CODE_TEMPLATE = '''\
#!{python}
import sys
import os
import {name}.main
def main():
    {name}.main.main()
if __name__ == '__main__':
    main()
'''

# Handle running from a normal installation and also from a local Git repo.
try:
    exec('import {} as main_module'.format(PROGRAM_NAME))
except ModuleNotFoundError:
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))
    exec('import {} as main_module'.format(PROGRAM_NAME))


def abort(message, retcode=1):
    """Display an error message and abort."""
    print('ERROR: {}'.format(message))
    sys.exit(retcode)


def run_or_abort(*command_args):
    """Run command and abort if an error occurs."""
    result = subprocess.run(command_args)
    if result.returncode != 0:
        abort('Command failed with return code {}.'.format(result.returncode))


def is_virtual_environment_needed():
    """Check if a virtual environment is needed to satisfy dependencies."""
    for dependency in PIP_DEPENDENCIES:
        try:
            exec('import {}'.format(dependency))
        except ModuleNotFoundError:
            return True
    return False


def execute_virtual_environment():
    """Build and invoke virtual environment if there are dependencies."""

    root_dir = os.path.join(os.path.expanduser('~'), '.{}'.format(PROGRAM_NAME), 'venv')

    # Avoid redundantly running pip, etc. if the app script is present.
    script_path = os.path.join(root_dir, 'bin', PROGRAM_NAME)
    if not os.path.exists(script_path):

        # Create the virtual environment itself?
        if not os.path.exists(root_dir):
            run_or_abort('virtualenv', root_dir)

        # Pip-install library dependencies?
        if PIP_DEPENDENCIES:
            run_or_abort(os.path.join(root_dir, 'bin', 'pip3'), 'install', *PIP_DEPENDENCIES)

        # Generate the front end application script?
        if not os.path.exists(script_path):
            with open(script_path, 'w') as prog_fp:
                prog_fp.write(APP_CODE_TEMPLATE.format(
                    python=os.path.join(root_dir, 'bin', 'python3'),
                    name=PROGRAM_NAME))
            os.chmod(script_path, os.stat(script_path).st_mode | stat.S_IEXEC)

        # The application library directory?
        python_name = 'python{}.{}'.format(sys.version_info.major, sys.version_info.minor)
        app_lib_dir = os.path.join(root_dir, 'lib', python_name, 'site-packages', PROGRAM_NAME)
        if not os.path.exists(app_lib_dir):
            os.symlink(os.path.dirname(main_module.__file__), app_lib_dir)  #pylint: disable=E0602

    # Invoke the virtual environment application script.
    os.execlp(script_path, script_path, *sys.argv[1:])


def _main():
    # Check if dependencies require a virtual environment and build one and use
    # it as needed. Does not return if using a virtual environment.
    if is_virtual_environment_needed():
        execute_virtual_environment()
    # Invoke the main program.
    main_module.main()  #pylint: disable=E0602


if __name__ == "__main__":
    _main()
